Для полномочий на файлы в linux команда sudo chmod -R (рекурсивно) ugo=rwx (юзер-группа-прочие=чтение-запись-выполнение) <имя папки>
Для рекурсивного изменения владельца sudo chown -R <user>:<group> <dir name>
Выполняем через sudo, чтобы получить доступ ко всем файлам
Для назначения файлам/папкам по маске используем find (для неисполняемых файлов назначаем rw,
но для их папок rwx, иначе не сможем их открыть)
find <dir> -type d -exec chmod 777 {} \; назначает rvx всем папкам в <dir>

Авторизация в консоли, для выполнения команд rvm
(или добавить в конфигурацию консоли, по разному в KDE и форках Gnome, описание на сайте RVM)
/bin/bash --login

Чтобы просмотреть все доступные для установки версии Ruby
% rvm list known

Предположим вы работаете с двумя версиями 2.1.2 для ROR2 и 1.9.2 для ROR3
% rvm install 1.9.2
% rvm install 2.1.2

Чтобы увидеть все установленные версии Ruby
% rvm list

Переключиться на ruby 2.1.2
% rvm use 2.1.2

Использовать версию ruby 1.9.2 по умолчанию
% rvm use 1.9.2 --default

Работа с gemsets

Создадим два разных набора gemset'ов:

% rvm gemset create test192

% rvm 2.1.2
% rvm gemset create test212

% rvm gemset list

% rvm use 2.1.2@test212 --default # Использовать gemset test212 по умолчанию

.ruby-version и .ruby-gemset создаем вручную в папке проекта, RVM при входе читает их и привязывает 
проект к определенному гемсету
в .ruby-version пишем например ruby-2.1.1
в .ruby-gemset - имя гемсета
Старый формат:
.rvmrc создается вручную в папке проекта, RVM при входе прочитывает и выполняет его
размещаем в нем команды RVM, например:
rvm use ruby-2.1.2@rails
в .rvmrc не работает короткое название гемсетов как 2.1.2@rails, которое прокатывает в консоли
нужно использовать полное название ruby2.1.2@rails

Gemset'ы можно удалять, очищать, экспортировать и импортировать гемы из одного в gemset'a в другой.
RVM предоставляет следующие команды для работы с gemsets:
create — создание нового gemset
export — экспорт списка гемов в файл default.gems
import — установка в текущий gemset списка гемов из файла default.gems
delete — удалить gemset
empty — очистить gemset


Гемы устанавливаем в папку проекта с помощью bundler
сам гем bundler устанавливается в гемсет RVM автоматически
создать Gemfile
bundle init

в Gemfile запоняем список гемов по примеру в комментарии
source "https://rubygems.org"
#gem "rails"

установка гемов
bundle install
если используется RVM, гемы будут установлены в папку текущего гемсета, если нет, в ~/.bundle

если изменен Gemfile, обновить гемсет
bundle update

чтобы не подгружать гемы создаем локальную копию в vendor/cashe
bundle package

гемы можно объединять в группы, при установке выбирать, какие группы устанавливать
bundle install —without test

Как только вы закончили разработку приложения, нужно заблокировать изменение Gemfile:
bundle lock

После выполнения данной команды создастся файл Gemfile.lock, который будет содержать все зависимости
на основе установленых gem’ов у вас на компьютере.
Это делается для того чтоб зафиксировать версии gem’ов при которых приложение работает корректно.

Установка БД Sqlite
sudo apt-get install sqlite3 libsqlite3-dev

Добавление гемов
добавить названия в Gemfile, запустить tools-bundler-install
если нужно добавить в локальное хранилище - tools-bundler-pack

Запуск сервера, параметры для Cloud9 
rails s -b $IP -p $PORT

Использование git в командной строке:

Статус репозитория ( добавление, удаление, изменение файлов ):
git status

Посмотреть различия между последним коммитом и текущими изменениями:
git diff

Добавить файл для идексации и следить за всеми изменениями в нем ( можно задавать по маске ):
git add <file>

git add -A stages All
git add . stages new and modified, without deleted
git add -u stages modified and deleted, without new

Отменить изменение не закоммиченных файлов
git reset --hard

Коммит
git commit (без -m открывает текстовый редактор для комментария коммита)
git commit -m "My message"

Показать историю коммитов:
git log
 
Показать историю коммитов по конкретному файлу:
git log <file>
 
List remotes
git remote -v

Получить изменения из репозитория со списком всех веток ( при этом стираются любые локальные изменения ):
git fetch <remote>

Получить копию текущей ветки с удаленного репозитория и слить ее с локальной копией:
git pull <remote>

https://gist.github.com/x8core/9280365


Запуск файла в rails-консоли (rails c)
f = File.open("test.rb")
eval(f.read)

Модели
Инициализация - tools-rake task-db:create
консоль$ rake db:create

Создание - tools-rails generator-model, задается название модели и название и тип полей
консоль$ rails generate model Model field_1:field_type field_n:field_type

Связи
на логическом уровне создаются в моделях, например has_many, belongs_to
для создания поля БД, также указывается в миграции, в начальной
rails generate model Post text:string user:references
или в отдельной
rails g migration addUserIdToPosts user_id:integer
или в миграцию добавить руками строку, альтернатива
t.belongs_to :user, index: true

Миграции
Для существующей модели генерируются новые миграции, tools-rails generator-migration
Применить - tools-rake task-db:migration
консоль$ rake db:migrate

Внести начальные данные
заполнить файл  /migrations/seeds.rb, запустить tools-rake task-db:seed
консоль$ rake db:seed

Типа полей для ActiveRecord
:binary
:boolean
:date
:datetime
:decimal
:float
:integer
:primary_key
:references
:string
:text
:time
:timestamp

Заменить библиотеки тестирования по умолчанию
Внести гемы в Gemfile

group :development, :test do
  gem 'rspec-rails'
  gem 'factory_girl_rails'
end

group :test do
  gem 'faker'
  gem 'database_cleaner'
end
установить, bundle install

Заменить генераторы по умолчанию в /Config/application.rb

config.generators do |g|
  g.test_framework :rspec
  g.fixture_replacement :factory_girl, dir: 'spec/factories'
end

Теперь при создании модели также создаются RSpec и FactoryGirl

Для инициализации rspec
В tools-rails generator выбрать показ скрытых и запустить rspec install
консоль$ rails generate rspec:install

RSpec использует разные матчеры под разные библиотеки, например для Html:
have_tag (матчер  Rails RSpec) для контента вьюхи и have_selector (матчер Capybara) для BDD
https://gist.github.com/steveclarke/2353100

rails g model User login:string psw:string
rails g model Post text:string user:references
rails g scaffold Order num:string

// model User for bcrypt authentication system
rails g scaffold User name:string password:string password_confirmation:string password_digest:string

rails g model GoodsGroup name:string
rails g model Goods name:string goods_group:references

rails g model Model name:string characteristic:references
rails g model Characteristic name:string model:references

rails g migration add_skill_to_users skill:integer
rails g migration add_addresses_to_order billing_address:integer shipping_address:integer

rails g scaffold Book title:string author:string library_cell:integer
rails g migration addLibraryCellToBook library_cell:integer

rails g controller Rating new
rails g rspec:controller auth index sign_in sign_out


Что где:
test_am - amazon
amazon-model - заготовка всех моделей amazon и тестов для них
BDD/simple_link - BDD/TDD, RSpec, Capybara, FactoryGirl
BDD/RG_sample - пример тестов модели из курса Rg
BDD/simple_model_test - пример тестирования модели
depot - сторонний пример магазина
twb-sample - пример интеграции twitter bootstrap в rails
